[{"/Users/vadim/Desktop/Contact List/src/index.js":"1","/Users/vadim/Desktop/Contact List/src/Components/Contact List/Contact Item/contactItem.js":"2","/Users/vadim/Desktop/Contact List/src/Components/Contact List/contactList.js":"3"},{"size":2265,"mtime":1610547672602,"results":"4","hashOfConfig":"5"},{"size":2178,"mtime":1610547052622,"results":"6","hashOfConfig":"5"},{"size":4197,"mtime":1610547069184,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"o6pt89",{"filePath":"10","messages":"11","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"12","usedDeprecatedRules":"13"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16","usedDeprecatedRules":"13"},"/Users/vadim/Desktop/Contact List/src/index.js",["17"],"/Users/vadim/Desktop/Contact List/src/Components/Contact List/Contact Item/contactItem.js",["18","19"],"import { render } from '@testing-library/react';\nimport React, { Fragment } from 'react'\n\nclass ContactItem extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state= {\n          id: this.props.id,\n          name: this.props.name,\n          lables: this.props.lables,\n          phone: this.props.phone,\n          email: this.props.email,\n          avatar: this.props.avatar,\n          List: this.props.List\n        }\n        this.updata = this.updata.bind(this)\n    }\n    updata () {\n      this.setState({lables: this.props.lables})\n    }\n    \n    render() {\n      let {name, lables, phone, email, avatar, id} = this.state;\n        const imageURL = `https://bootdey.com/img/Content/avatar/avatar${avatar}.png`\n        let styleLables = 'lab'\n        if(lables === 'Work') {\n          styleLables = 'lab lab-success'\n        } else if(lables === 'Family') {\n          styleLables = 'lab lab-primary'\n        } else if(lables === 'Private') {\n          styleLables = 'lab lab-danger'\n        } else if(lables === 'Friends') {\n          styleLables = 'lab lab-warning'\n        }\n\n        return(\n            <Fragment >\n              <div className=\"unit\">\n                <div className=\"field name\">\n                  <div className=\"check\">\n                    <input id=\"cb2\" name=\"cb1\" type=\"checkbox\"/>\n                    <label htmlFor=\"cb2\"></label>\n                  <svg viewBox=\"0 0 100 100\" xmlns=\"http://www.w3.org/2000/svg\"></svg>\n                      \n                  </div>\n                  <div>\n                    <img src={imageURL} alt=\"image\" className=\"avatar\"/>{name}\n                  </div>\n                  <div className={styleLables} onClick={(event) => {this.props.changeLable(event, this.props.List, this.updata)}}>{lables} <input type='hidden' value={id}/></div>\n                  \n                </div>\n                <div className=\"field phone\">\n                  {phone}\n                </div>\n                <div className=\"field email\">\n                  {email}\n                </div>\n              </div>\n              \n              </Fragment>      \n        )\n    }\n}\n\nexport default ContactItem  ",["20","21"],"/Users/vadim/Desktop/Contact List/src/Components/Contact List/contactList.js",["22","23","24"],"import React from 'react'\nimport ContactItem from './Contact Item/contactItem'\n\nclass ContactList extends React.Component  {\n  constructor(props) {\n    super(props)\n    this.state = {\n      List: this.props.List,\n      changeLable: this.props.changeLable, \n      allLables: this.props.allLables\n    }\n  }\n\n  render() {\n    let user = this.state.List.map((user) => {\n     return(\n       <ContactItem \n        id={user.id}\n        name={user.name}\n        lables={user.lables}\n        phone={user.phone}\n        email={user.email}\n        avatar={user.avatar}\n        changeLable={this.state.changeLable}\n        allLables={this.state.allLables }\n        List={this.props.List}\n       />\n     )\n    })\n\n    return (\n        <div className=\"container bootstrap snippets bootdeys bootdey\">\n        <div className=\"row decor-default\">\n          <div className=\"col-lg-3 col-md-4 col-sm-12\">\n          <div className=\"contacts-labels\">\n            <div className=\"title\">All contacts<span>76</span></div>\n            <div className=\"list\">\n              <div className=\"input-group\"> <input type=\"text\" className=\"contacts-search\" placeholder=\"Search\"/> \n              </div>\n              <div className=\"head\">Labels</div>\n              <div className=\"unit\">\n                <div className=\"lab lab-success\">Work</div><span></span>\n              </div>\n              <div className=\"unit\">\n                <div className=\"lab lab-primary\">Family</div><span>8</span>\n              </div>\n              <div className=\"unit\">\n                <div className=\"lab lab-danger\">Private</div><span>13</span>\n              </div>\n              <div className=\"unit\">\n                <div className=\"lab lab-warning\">Friends</div><span>47</span>\n              </div>\n              <button type=\"button\" className=\"btn btn-primary font-weight-700\">Add new label</button>\n            </div>\n          </div>\n          </div>\n          <div className=\"col-lg-9 col-md-8 col-sm-12\">\n          <div className=\"contacts-list\">\n            <h5 className=\"title\">Contact List</h5>\n            <form className=\"ac-custom ac-checkbox ac-checkmark\" autoComplete=\"off\">\n              <div className=\"input-group\">\n                <input type=\"text\" className=\"contacts-list-search\" placeholder=\"Search\"/>\n              </div>\n              <div className=\"unit head\">\n                <div className=\"field name\">\n                  <div className=\"check\">\n                    <input id=\"cb1\" name=\"cb1\" type=\"checkbox\"/>\n                    <label htmlFor=\"cb1\"></label>\n                  <svg viewBox=\"0 0 100 100\" xmlns=\"http://www.w3.org/2000/svg\"></svg></div>\n                  Name\n                </div>\n                <div className=\"field phone\">\n                  Phone\n                </div>\n                <div className=\"field email icons\">\n                  Email\n                  <div className=\"btn-group pull-right\" role=\"group\">\n                    <button type=\"button\" className=\"btn btn-default\"><span className=\"icon icon-folder\"></span></button>\n    \n                    <div className=\"btn-group\" role=\"group\">\n                      <button type=\"button\" className=\"btn btn-default dropdown-toggle\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\"><span className=\"icon icon-label\"></span></button>\n    \n                      <ul className=\"dropdown-menu pull-right\">\n                        <li><a href=\"#\"><span className=\"label label-success text-dark\">New</span></a></li>\n                        <li><a href=\"#\"><span className=\"label label-primary text-dark\">Social</span></a></li>\n                        <li><a href=\"#\"><span className=\"label label-warning text-dark\">Spam</span></a></li>\n                      </ul>\n                    </div>\n                    <button type=\"button\" className=\"btn btn-default\"><span className=\"icon icon-trash\"></span></button>\n                  </div>\n                </div>\n              </div>\n              {user.length !==0 ? user: <p className='liset-empty'>Contact list is empty.</p>}\n              </form>\n              </div>\n            </div>\n              </div>\n            </div>  \n    )\n  }\n}\n\nexport default ContactList",{"ruleId":"25","severity":1,"message":"26","line":62,"column":16,"nodeType":"27","messageId":"28","endLine":62,"endColumn":18},{"ruleId":"29","severity":1,"message":"30","line":1,"column":10,"nodeType":"31","messageId":"32","endLine":1,"endColumn":16},{"ruleId":"33","severity":1,"message":"34","line":47,"column":21,"nodeType":"35","endLine":47,"endColumn":73},{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","severity":1,"message":"41","line":84,"column":29,"nodeType":"35","endLine":84,"endColumn":41},{"ruleId":"40","severity":1,"message":"41","line":85,"column":29,"nodeType":"35","endLine":85,"endColumn":41},{"ruleId":"40","severity":1,"message":"41","line":86,"column":29,"nodeType":"35","endLine":86,"endColumn":41},"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-unused-vars","'render' is defined but never used.","Identifier","unusedVar","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You donâ€™t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","no-native-reassign",["42"],"no-negated-in-lhs",["43"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","no-global-assign","no-unsafe-negation"]